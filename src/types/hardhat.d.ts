/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUtils__factory>;
    getContractFactory(
      name: "EventAndErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EventAndErrors__factory>;
    getContractFactory(
      name: "OwnerSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerSettings__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "IReputation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReputation__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "SafeTransferLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeTransferLib__factory>;
    getContractFactory(
      name: "P2PIX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.P2PIX__factory>;
    getContractFactory(
      name: "Reputation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Reputation__factory>;

    getContractAt(
      name: "BaseUtils",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUtils>;
    getContractAt(
      name: "EventAndErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EventAndErrors>;
    getContractAt(
      name: "OwnerSettings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerSettings>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "IReputation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReputation>;
    getContractAt(
      name: "MockToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ECDSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "SafeTransferLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeTransferLib>;
    getContractAt(
      name: "P2PIX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.P2PIX>;
    getContractAt(
      name: "Reputation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Reputation>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
